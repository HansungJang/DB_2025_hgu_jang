##STEP1. [VIEW 변환하기]

#1. institutions (NEW: 4NF 정규화)
CREATE VIEW view_institutions AS
SELECT DISTINCT
   published_institution,
   publish_institution_url,
   publish_Id
FROM allrecords2
WHERE published_institution IS NOT NULL AND publish_Id IS NOT NULL;


#2. documents (updated: publish_Id → FK) 3부분으로 구성.


#2.1 document_id value set
CREATE VIEW view_documents_id AS
SELECT DISTINCT
   hash_key,
   doc_id, #
   doc_type_Id
FROM allrecords2
WHERE hash_key IS NOT NULL AND doc_id IS NOT NULL;



#2.2 document_title
CREATE VIEW view_documents_title AS
SELECT DISTINCT
   hash_key,
   doc_title,
   doc_id
FROM allrecords2
WHERE hash_key IS NOT NULL AND doc_title IS NOT NULL;



#2.3 document_post  (수정 / 25.05.29.)
CREATE VIEW view_documents_post AS
SELECT DISTINCT
   hash_key,
   publish_Id,
   post_date,
   post_writer,
   post_title,
   post_body,
   abstract,
   original_url,
   top_category,
   doc_id #document_id, reference를 위해 필요.
FROM allrecords2
WHERE hash_key IS NOT NULL AND publish_Id IS NOT NULL;


# #(중복 여부) - 중복X (사용가능)
SELECT hash_key, doc_id, COUNT(*) AS count
FROM view_documents_post
GROUP BY hash_key, doc_id
HAVING count > 1;




# 3. files (수정 / 25.05.29.)
CREATE VIEW view_files AS
(SELECT DISTINCT
    file_id ,
    file_content_id ,
    file_name ,
    file_download_url,
    hash_key,
    doc_id #
FROM allrecords2
WHERE hash_key IS NOT NULL AND file_id IS NOT NULL
   );



#4. document_keywords  (수정 / 25.05.29.)
CREATE VIEW  view_document_keywords AS(
                                     SELECT DISTINCT
                                         hash_key,
                                         keyword,
                                         doc_id
                                     FROM allrecords2
                                     WHERE hash_key IS NOT NULL AND keyword IS NOT NULL
                                         );




#5. users
CREATE VIEW view_users AS (
                         SELECT DISTINCT
                             id,
                             email ,
                             name ,
                             institution ,
                             title ,
                             registered_date
                         FROM allrecords2
                         WHERE id IS NOT NULL
                             );




# 6. saved_documents  (수정 / 25.05.29.)


CREATE VIEW view_saved_documents AS(
                                  SELECT DISTINCT
                                      saved_doc_hash_key,
                                      user_id ,doc_id, topic, user_email,
                                      saved_doc_date,
                                      id, hash_key #
                                  FROM allrecords2
                                  WHERE saved_doc_hash_key IS NOT NULL AND
                                      doc_id IS NOT NULL AND
                                      user_id IS NOT  NULL AND
                                      saved_doc_date IS NOT NULL AND
                                      user_email IS NOT NULL
                                      );


# saved_doc_hash_key, user_id, doc_id, saved_doc_date,   (과연 최소일까?)
#(중복 여부) - 중복X (사용가능)
SELECT hash_key, announcement,   COUNT(*) AS count
FROM view_announcements
GROUP BY hash_key, announcement
HAVING count > 1;




# 7. announcements (수정 / 25.05.29.)
CREATE VIEW view_announcements AS(
                                SELECT DISTINCT
                                    hash_key,
                                    category,
                                    announcement ,
                                    content ,
                                    reg_date,
                                    mod_date,
                                    is_main_announce,
                                    doc_id #
                                FROM allrecords2
                                WHERE hash_key IS NOT NULL
                                    );


#STEP2. [TABLE 정의하기]


-- 1. institutions (NEW: 4NF 정규화)
CREATE TABLE institutions (
                             publish_Id TINYINT PRIMARY KEY,
                             published_institution LONGTEXT,
                             publish_institution_url LONGTEXT
);


-- 2. documents (updated: publish_Id → FK)

# ---- 2.1. documents_id
CREATE TABLE documents_id (
                             hash_key CHAR(20),
                             doc_id TINYINT,
                             doc_type_id TINYINT,
                             PRIMARY KEY (hash_key, doc_id)
#                              ,UNIQUE (hash_key) # FK 활용을 위함. (doc_id와 독립적으로)
);

# ---- 2.2. documents_title
CREATE TABLE documents_title (
                                hash_key CHAR(20),
                                doc_id TINYINT,
                                doc_title TEXT,
                                doc_title_hash CHAR(64),


                                PRIMARY KEY (hash_key, doc_title_hash, doc_id),
                                FOREIGN KEY (hash_key, doc_id) REFERENCES documents_id(hash_key, doc_id)
);



# ---- 2.3. documents_post (수정됨 / 25.05.29.)
CREATE TABLE documents_post (
                               hash_key CHAR(20) ,
                               publish_Id TINYINT,
                               post_date CHAR(10),
                               post_writer LONGTEXT,
                               post_title LONGTEXT,
                               post_body LONGTEXT,
                               abstract LONGTEXT,
                               original_url LONGTEXT,
                               top_category LONGTEXT,
                               doc_id TINYINT,

                               PRIMARY KEY (hash_key, doc_id),
                               FOREIGN KEY (hash_key, doc_id) REFERENCES documents_id(hash_key, doc_id) #(누락된 hash_key가 나온다는 error발생)
);




-- 3. files (수정됨 / 25.05.29.)
CREATE TABLE files (
                      file_id CHAR(20),
                      file_content_id SMALLINT,
                      file_name LONGTEXT,
                      file_download_url LONGTEXT,
                      hash_key CHAR(20),
                      doc_id TINYINT,

                      PRIMARY KEY (file_id, hash_key, doc_id),
                      FOREIGN KEY (hash_key, doc_id) REFERENCES documents_id(hash_key, doc_id)
);




-- 4. document_keywords (수정됨 / 25.05.29.)
CREATE TABLE document_keywords (
                                  hash_key CHAR(20),
                                  keyword VARCHAR(255),
                                  doc_id TINYINT,

                                  PRIMARY KEY (hash_key, keyword, doc_id),
                                  FOREIGN KEY (hash_key, doc_id) REFERENCES documents_id(hash_key, doc_id)
);




-- 5. users (수정 / 25.05.29.)
CREATE TABLE users (
                      id VARCHAR(255) PRIMARY KEY, #문서 id 아님?
                      email MEDIUMTEXT ,
                      name MEDIUMTEXT,
                      institution MEDIUMTEXT,
                      title MEDIUMTEXT,
                      registered_date DATE,
                      email_hash CHAR(64) UNIQUE
 );




-- 6. saved_documents (documents 연결) (수정 / 25.05.29.)
CREATE TABLE saved_documents (
                                saved_doc_hash_key CHAR(20),
                                user_id VARCHAR(255),
                                doc_id TINYINT,
                                topic LONGTEXT,
                                user_email MEDIUMTEXT,
                                saved_doc_date DATE,
                                user_email_hash CHAR(64),
                                id VARCHAR(255), #저장한 사용자 id
                                hash_key CHAR(20), #document hash_key 값
                                PRIMARY KEY (saved_doc_hash_key, user_id, doc_id, saved_doc_date, user_email_hash),
                                FOREIGN KEY (hash_key, doc_id) REFERENCES documents_id(hash_key, doc_id), #hash
                                FOREIGN KEY (user_email_hash, id) REFERENCES users(email_hash, id) #hash
);


-- 7. announcements (수정됨 / 25.05.29.)
CREATE TABLE announcements (
                              hash_key CHAR(20),#
                              category CHAR(7),
                              announcement TINYTEXT,
                              content TEXT,
                              reg_date BIGINT,#
                              mod_date BIGINT,#
                              is_main_announce TINYINT,
                              announcement_hash CHAR(64),#
                              content_hash CHAR(64),#
                              doc_id TINYINT,

                              PRIMARY KEY (hash_key, announcement_hash),
                              FOREIGN KEY (hash_key, doc_id) REFERENCES documents_id(hash_key, doc_id)
);




#STEP3. [VIEW > TABLE 변환하기]


#1. institutions
INSERT INTO institutions (
   published_institution,
   publish_institution_url,
   publish_Id
)
SELECT
   published_institution,
   publish_institution_url,
   publish_Id
FROM view_institutions;


#2.1. documents_id
INSERT INTO documents_id (
   hash_key,
   doc_id,
   doc_type_Id
)
SELECT
   hash_key,
   doc_id,
   doc_type_Id
FROM view_documents_id;


#2.2. documents_title (SHA2라는 doc_title 값을 hash로 만들어서 길이가 너무 긴 문제 해결)
INSERT INTO documents_title (
   hash_key,
   doc_id,
   doc_title,
   doc_title_hash
)
SELECT
   hash_key,
   doc_id,
   doc_title,
   SHA2(doc_title, 256)
FROM view_documents_title;


#2.3. documents_post  (수정됨 / 25.05.29.)
INSERT INTO documents_post (
   hash_key,
   publish_Id,
   post_date,
   post_writer,
   post_title,
   post_body,
   abstract,
   original_url,
   top_category,
   doc_id #
)
SELECT
   hash_key,
   publish_Id,
   post_date,
   post_writer,
   post_title,
   post_body,
   abstract,
   original_url,
   top_category,
   doc_id #
FROM view_documents_post;


#3. files  (수정됨 / 25.05.29.)
INSERT INTO files (
   file_id,
   file_content_id,
   file_name,
   file_download_url,
   hash_key,
   doc_id #
)
SELECT
   file_id,
   file_content_id,
   file_name,
   file_download_url,
   hash_key,
   doc_id #
FROM view_files;


# 4. document_keywords (수정됨 / 25.05.29.)
INSERT INTO document_keywords (
   hash_key,
   keyword,
   doc_id #
)
SELECT
   hash_key,
   keyword,
   doc_id #
FROM view_document_keywords;


# 5. users
INSERT INTO users (
   id,
   email,
   name,
   institution,
   title,
   registered_date,
   email_hash
)
SELECT
   id,
   email,
   name,
   institution,
   title,
   registered_date,
   SHA2(email, 256)
FROM view_users;


# 6. saved_documents
INSERT INTO saved_documents (
   saved_doc_hash_key,
   user_id,
   doc_id,
   topic,
   user_email,
   saved_doc_date,
   user_email_hash,
   id,
   hash_key
)
SELECT
   saved_doc_hash_key,
   user_id,
   doc_id,
   topic,
   user_email,
   saved_doc_date,
   SHA2(user_email, 256),
   id,
   hash_key
FROM view_saved_documents;


#7. announcements (수정됨 / 25.05.29.)
INSERT INTO announcements (
   hash_key,
   category,
   announcement,
   content,
   reg_date,
   mod_date,
   is_main_announce,
   announcement_hash,
   doc_id
)
SELECT
   hash_key,
   category,
   announcement,
   content,
   reg_date,
   mod_date,
   is_main_announce,
   SHA2(announcement, 256),
   doc_id
FROM view_announcements;


#STEP4. TABLE별 크기 조회
SELECT
   table_name,
   ROUND(data_length / 1024 / 1024, 2) AS data_mb,
   ROUND(index_length / 1024 / 1024, 2) AS index_mb,
   ROUND((data_length + index_length) / 1024 / 1024, 2) AS total_mb
FROM information_schema.tables
WHERE table_schema = DATABASE()
ORDER BY total_mb DESC;



